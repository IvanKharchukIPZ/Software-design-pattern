#include <iostream>
#include <vector>
#include <memory>

using namespace std;

template<typename T>
class Iterator {
public:
    virtual ~Iterator() = default;
    virtual bool hasNext() const = 0;
    virtual T next() = 0;
};

template<typename T>
class Aggregate {
public:
    virtual ~Aggregate() = default;
    virtual unique_ptr<Iterator<T>> createIterator() const = 0;
};

template<typename T>
class VectorIterator : public Iterator<T> {
public:
    VectorIterator(const vector<T>& v) : vec(v), index(0) {}

    bool hasNext() const override {
        return index < vec.size();
    }

    T next() override {
        return vec[index++];
    }

private:
    const vector<T>& vec;
    size_t index;
};

template<typename T>
class VectorAggregate : public Aggregate<T> {
public:
    void add(const T& item) {
        vec.push_back(item);
    }

    unique_ptr<Iterator<T>> createIterator() const override {
        return make_unique<VectorIterator<T>>(vec);
    }

private:
    vector<T> vec;
};

int main() {
    VectorAggregate<int> aggregate;
    aggregate.add(1);
    aggregate.add(2);
    aggregate.add(3);

    auto iterator = aggregate.createIterator();
    while (iterator->hasNext()) {
        cout << iterator->next() << " ";
    }

    return 0;
}
