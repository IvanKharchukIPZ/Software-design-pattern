#include <iostream>

using namespace std;

class AbstractProductA {
public:
    virtual void use() const = 0;
};

class AbstractProductB {
public:
    virtual void eat() const = 0;
};

class ConcreteProductA1 : public AbstractProductA {
public:
    void use() const override {
        cout << "Using Product A1" << endl;
    }
};

class ConcreteProductA2 : public AbstractProductA {
public:
    void use() const override {
        cout << "Using Product A2" << endl;
    }
};

class ConcreteProductB1 : public AbstractProductB {
public:
    void eat() const override {
        cout << "Eating Product B1" << endl;
    }
};

class ConcreteProductB2 : public AbstractProductB {
public:
    void eat() const override {
        cout << "Eating Product B2" << endl;
    }
};

class AbstractFactory {
public:
    virtual AbstractProductA* createProductA() const = 0;
    virtual AbstractProductB* createProductB() const = 0;
};

class ConcreteFactory1 : public AbstractFactory {
public:
    AbstractProductA* createProductA() const override {
        return new ConcreteProductA1();
    }
    
    AbstractProductB* createProductB() const override {
        return new ConcreteProductB1();
    }
};

class ConcreteFactory2 : public AbstractFactory {
public:
    AbstractProductA* createProductA() const override {
        return new ConcreteProductA2();
    }
    
    AbstractProductB* createProductB() const override {
        return new ConcreteProductB2();
    }
};

void clientCode(const AbstractFactory& factory) {
    AbstractProductA* productA = factory.createProductA();
    AbstractProductB* productB = factory.createProductB();
    productA->use();
    productB->eat();
    delete productA;
    delete productB;
}

int main() {
    ConcreteFactory1 factory1;
    clientCode(factory1);

    ConcreteFactory2 factory2;
    clientCode(factory2);

    return 0;
}
